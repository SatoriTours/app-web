---
description:
globs:
alwaysApply: true
---
# 项目代码规则

## 项目概览
这是一个使用 React Router 7 和 TailwindCSS 4 构建的单页应用。项目主要用于展示和管理旅游相关信息，使用中文作为主要界面语言。

## 技术栈
- React 19
- React Router 7
- TypeScript
- TailwindCSS 4
- Vite

## 文件结构
- `/app/routes/` - 路由组件
- `/app/lib/` - 工具函数和通用逻辑
- `/app/root.tsx` - 应用根组件
- `/app/app.css` - 全局样式
- `app/routes.ts` - 文件配置了应用的路由

## 代码规范

### 命名规范
- 组件使用 PascalCase 命名方式，如 `LoginPage.tsx`
- 函数和变量使用 camelCase 命名方式，如 `handleLogin`
- 常量使用全大写下划线命名方式，如 `MAX_RETRY_COUNT`
- 事件处理函数统一使用 `handle` 前缀，如 `handleSubmit`

### 文件组织
- 每个路由页面对应 `/app/routes/` 下的一个文件
- 页面组件应导出默认函数组件
- Meta 数据应通过 `meta` 导出函数提供
- 页面加载数据应通过 `loader` 导出函数提供

### API请求
- 所有 API 请求统一通过 `/api` 前缀路径发送
- API的接口定义 api.md 目录里
- API 响应格式为 `{ code: number, data: any, msg: string }`
- 成功响应的 code 为 0

### 样式规范
- 优先使用 TailwindCSS 类进行样式设置
- 遵循移动优先的响应式设计原则
- 颜色使用 TailwindCSS 的颜色系统
- 暗黑模式通过 `dark:` 前缀类支持

### TypeScript规范
- 为组件属性创建接口，命名为 `ComponentNameProps`
- 为 API 响应创建类型定义
- 尽量避免使用 `any` 类型
- 路由相关类型定义在 `app/routes/types/` 目录下

### 组件开发规范
- 组件应遵循单一职责原则
- 使用函数组件和 Hooks
- 使用早期返回模式提高代码可读性
- 为表单元素实现适当的可访问性属性

### 状态管理
- 局部状态使用 React useState 和 useReducer
- 跨组件状态通过 Context API 管理
- 路由参数通过 React Router 的 useParams 获取

### 性能优化
- 合理使用 React.memo, useMemo 和 useCallback
- 大型列表考虑实现虚拟滚动
- 图片使用懒加载

### 错误处理
- API 请求应包含适当的错误处理逻辑
- 用户友好的错误信息应显示在界面上
- 开发错误信息应记录到控制台





